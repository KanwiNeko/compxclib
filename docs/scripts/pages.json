[{"name":"BINARY_OPERATOR","description":"compxclib.parser.data.AstTypes.BINARY_OPERATOR","location":"compxclib/compxclib.parser.data/-ast-types/-b-i-n-a-r-y_-o-p-e-r-a-t-o-r/index.html","searchKeys":["BINARY_OPERATOR","BINARY_OPERATOR","compxclib.parser.data.AstTypes.BINARY_OPERATOR"]},{"name":"BOTH","description":"compxclib.enums.Parameter.BOTH","location":"compxclib/compxclib.enums/-parameter/-b-o-t-h/index.html","searchKeys":["BOTH","BOTH","compxclib.enums.Parameter.BOTH"]},{"name":"COMPLEX_NUMBER","description":"compxclib.parser.data.Tokens.COMPLEX_NUMBER","location":"compxclib/compxclib.parser.data/-tokens/-c-o-m-p-l-e-x_-n-u-m-b-e-r/index.html","searchKeys":["COMPLEX_NUMBER","COMPLEX_NUMBER","compxclib.parser.data.Tokens.COMPLEX_NUMBER"]},{"name":"DIVIDE","description":"compxclib.enums.Operator.DIVIDE","location":"compxclib/compxclib.enums/-operator/-d-i-v-i-d-e/index.html","searchKeys":["DIVIDE","DIVIDE","compxclib.enums.Operator.DIVIDE"]},{"name":"EOF","description":"compxclib.parser.data.Tokens.EOF","location":"compxclib/compxclib.parser.data/-tokens/-e-o-f/index.html","searchKeys":["EOF","EOF","compxclib.parser.data.Tokens.EOF"]},{"name":"FUNCTION","description":"compxclib.parser.data.AstTypes.FUNCTION","location":"compxclib/compxclib.parser.data/-ast-types/-f-u-n-c-t-i-o-n/index.html","searchKeys":["FUNCTION","FUNCTION","compxclib.parser.data.AstTypes.FUNCTION"]},{"name":"FUNCTION","description":"compxclib.parser.data.Tokens.FUNCTION","location":"compxclib/compxclib.parser.data/-tokens/-f-u-n-c-t-i-o-n/index.html","searchKeys":["FUNCTION","FUNCTION","compxclib.parser.data.Tokens.FUNCTION"]},{"name":"IMAGINARY","description":"compxclib.enums.Parameter.IMAGINARY","location":"compxclib/compxclib.enums/-parameter/-i-m-a-g-i-n-a-r-y/index.html","searchKeys":["IMAGINARY","IMAGINARY","compxclib.enums.Parameter.IMAGINARY"]},{"name":"IMAGINARY_NUMBER","description":"compxclib.parser.data.Tokens.IMAGINARY_NUMBER","location":"compxclib/compxclib.parser.data/-tokens/-i-m-a-g-i-n-a-r-y_-n-u-m-b-e-r/index.html","searchKeys":["IMAGINARY_NUMBER","IMAGINARY_NUMBER","compxclib.parser.data.Tokens.IMAGINARY_NUMBER"]},{"name":"IMAGINARY_UNIT","description":"compxclib.parser.data.Tokens.IMAGINARY_UNIT","location":"compxclib/compxclib.parser.data/-tokens/-i-m-a-g-i-n-a-r-y_-u-n-i-t/index.html","searchKeys":["IMAGINARY_UNIT","IMAGINARY_UNIT","compxclib.parser.data.Tokens.IMAGINARY_UNIT"]},{"name":"MINUS","description":"compxclib.enums.Operator.MINUS","location":"compxclib/compxclib.enums/-operator/-m-i-n-u-s/index.html","searchKeys":["MINUS","MINUS","compxclib.enums.Operator.MINUS"]},{"name":"MODULO","description":"compxclib.enums.Operator.MODULO","location":"compxclib/compxclib.enums/-operator/-m-o-d-u-l-o/index.html","searchKeys":["MODULO","MODULO","compxclib.enums.Operator.MODULO"]},{"name":"NEGATIVE","description":"compxclib.enums.Sign.NEGATIVE","location":"compxclib/compxclib.enums/-sign/-n-e-g-a-t-i-v-e/index.html","searchKeys":["NEGATIVE","NEGATIVE","compxclib.enums.Sign.NEGATIVE"]},{"name":"NEGATIVE","description":"compxclib.enums.SqrtBranch.NEGATIVE","location":"compxclib/compxclib.enums/-sqrt-branch/-n-e-g-a-t-i-v-e/index.html","searchKeys":["NEGATIVE","NEGATIVE","compxclib.enums.SqrtBranch.NEGATIVE"]},{"name":"NUMBER","description":"compxclib.parser.data.Tokens.NUMBER","location":"compxclib/compxclib.parser.data/-tokens/-n-u-m-b-e-r/index.html","searchKeys":["NUMBER","NUMBER","compxclib.parser.data.Tokens.NUMBER"]},{"name":"NUMERIC_LITERAL","description":"compxclib.parser.data.AstTypes.NUMERIC_LITERAL","location":"compxclib/compxclib.parser.data/-ast-types/-n-u-m-e-r-i-c_-l-i-t-e-r-a-l/index.html","searchKeys":["NUMERIC_LITERAL","NUMERIC_LITERAL","compxclib.parser.data.AstTypes.NUMERIC_LITERAL"]},{"name":"OPERATOR","description":"compxclib.parser.data.Tokens.OPERATOR","location":"compxclib/compxclib.parser.data/-tokens/-o-p-e-r-a-t-o-r/index.html","searchKeys":["OPERATOR","OPERATOR","compxclib.parser.data.Tokens.OPERATOR"]},{"name":"PLUS","description":"compxclib.enums.Operator.PLUS","location":"compxclib/compxclib.enums/-operator/-p-l-u-s/index.html","searchKeys":["PLUS","PLUS","compxclib.enums.Operator.PLUS"]},{"name":"POSITIVE","description":"compxclib.enums.Sign.POSITIVE","location":"compxclib/compxclib.enums/-sign/-p-o-s-i-t-i-v-e/index.html","searchKeys":["POSITIVE","POSITIVE","compxclib.enums.Sign.POSITIVE"]},{"name":"POSITIVE","description":"compxclib.enums.SqrtBranch.POSITIVE","location":"compxclib/compxclib.enums/-sqrt-branch/-p-o-s-i-t-i-v-e/index.html","searchKeys":["POSITIVE","POSITIVE","compxclib.enums.SqrtBranch.POSITIVE"]},{"name":"POWER","description":"compxclib.enums.Operator.POWER","location":"compxclib/compxclib.enums/-operator/-p-o-w-e-r/index.html","searchKeys":["POWER","POWER","compxclib.enums.Operator.POWER"]},{"name":"REAL","description":"compxclib.enums.Parameter.REAL","location":"compxclib/compxclib.enums/-parameter/-r-e-a-l/index.html","searchKeys":["REAL","REAL","compxclib.enums.Parameter.REAL"]},{"name":"REAL_NUMBER","description":"compxclib.parser.data.Tokens.REAL_NUMBER","location":"compxclib/compxclib.parser.data/-tokens/-r-e-a-l_-n-u-m-b-e-r/index.html","searchKeys":["REAL_NUMBER","REAL_NUMBER","compxclib.parser.data.Tokens.REAL_NUMBER"]},{"name":"STRUCTURE","description":"compxclib.parser.data.Tokens.STRUCTURE","location":"compxclib/compxclib.parser.data/-tokens/-s-t-r-u-c-t-u-r-e/index.html","searchKeys":["STRUCTURE","STRUCTURE","compxclib.parser.data.Tokens.STRUCTURE"]},{"name":"TIMES","description":"compxclib.enums.Operator.TIMES","location":"compxclib/compxclib.enums/-operator/-t-i-m-e-s/index.html","searchKeys":["TIMES","TIMES","compxclib.enums.Operator.TIMES"]},{"name":"abstract val type: AstTypes","description":"compxclib.parser.parsing.AstMember.type","location":"compxclib/compxclib.parser.parsing/-ast-member/type.html","searchKeys":["type","abstract val type: AstTypes","compxclib.parser.parsing.AstMember.type"]},{"name":"abstract val value: Any","description":"compxclib.parser.parsing.AstMember.value","location":"compxclib/compxclib.parser.parsing/-ast-member/value.html","searchKeys":["value","abstract val value: Any","compxclib.parser.parsing.AstMember.value"]},{"name":"class AstTree(tks: ComplexList, numbers: List<ComplexNumber>)","description":"compxclib.parser.parsing.AstTree","location":"compxclib/compxclib.parser.parsing/-ast-tree/index.html","searchKeys":["AstTree","class AstTree(tks: ComplexList, numbers: List<ComplexNumber>)","compxclib.parser.parsing.AstTree"]},{"name":"class ComplexLexer(complexList: ComplexList)","description":"compxclib.parser.lexing.ComplexLexer","location":"compxclib/compxclib.parser.lexing/-complex-lexer/index.html","searchKeys":["ComplexLexer","class ComplexLexer(complexList: ComplexList)","compxclib.parser.lexing.ComplexLexer"]},{"name":"class ConversionRangeOutsideOfBounds(message: String) : Exception","description":"compxclib.exceptions.ConversionRangeOutsideOfBounds","location":"compxclib/compxclib.exceptions/-conversion-range-outside-of-bounds/index.html","searchKeys":["ConversionRangeOutsideOfBounds","class ConversionRangeOutsideOfBounds(message: String) : Exception","compxclib.exceptions.ConversionRangeOutsideOfBounds"]},{"name":"class Evaluator(input: AstMember)","description":"compxclib.parser.parsing.Evaluator","location":"compxclib/compxclib.parser.parsing/-evaluator/index.html","searchKeys":["Evaluator","class Evaluator(input: AstMember)","compxclib.parser.parsing.Evaluator"]},{"name":"class IllegalConversionArgument(message: String) : Exception","description":"compxclib.exceptions.IllegalConversionArgument","location":"compxclib/compxclib.exceptions/-illegal-conversion-argument/index.html","searchKeys":["IllegalConversionArgument","class IllegalConversionArgument(message: String) : Exception","compxclib.exceptions.IllegalConversionArgument"]},{"name":"class InvalidComparison(message: String) : Exception","description":"compxclib.exceptions.InvalidComparison","location":"compxclib/compxclib.exceptions/-invalid-comparison/index.html","searchKeys":["InvalidComparison","class InvalidComparison(message: String) : Exception","compxclib.exceptions.InvalidComparison"]},{"name":"class InvalidToken(message: String) : Exception","description":"compxclib.exceptions.InvalidToken","location":"compxclib/compxclib.exceptions/-invalid-token/index.html","searchKeys":["InvalidToken","class InvalidToken(message: String) : Exception","compxclib.exceptions.InvalidToken"]},{"name":"class Lexer(input: String)","description":"compxclib.parser.lexing.Lexer","location":"compxclib/compxclib.parser.lexing/-lexer/index.html","searchKeys":["Lexer","class Lexer(input: String)","compxclib.parser.lexing.Lexer"]},{"name":"class NumberLexer(tokens: ComplexList)","description":"compxclib.parser.lexing.NumberLexer","location":"compxclib/compxclib.parser.lexing/-number-lexer/index.html","searchKeys":["NumberLexer","class NumberLexer(tokens: ComplexList)","compxclib.parser.lexing.NumberLexer"]},{"name":"class Parser(input: String)","description":"compxclib.Parser","location":"compxclib/compxclib/-parser/index.html","searchKeys":["Parser","class Parser(input: String)","compxclib.Parser"]},{"name":"data class BinaryExpression(val type: AstTypes = AstTypes.BINARY_OPERATOR, val value: Operation) : AstMember","description":"compxclib.parser.parsing.BinaryExpression","location":"compxclib/compxclib.parser.parsing/-binary-expression/index.html","searchKeys":["BinaryExpression","data class BinaryExpression(val type: AstTypes = AstTypes.BINARY_OPERATOR, val value: Operation) : AstMember","compxclib.parser.parsing.BinaryExpression"]},{"name":"data class ComplexNumber(real: Number, imaginary: Number)","description":"compxclib.ComplexNumber","location":"compxclib/compxclib/-complex-number/index.html","searchKeys":["ComplexNumber","data class ComplexNumber(real: Number, imaginary: Number)","compxclib.ComplexNumber"]},{"name":"data class Function(val function: (ComplexNumber) -> ComplexNumber, val inside: AstMember)","description":"compxclib.parser.parsing.Function","location":"compxclib/compxclib.parser.parsing/-function/index.html","searchKeys":["Function","data class Function(val function: (ComplexNumber) -> ComplexNumber, val inside: AstMember)","compxclib.parser.parsing.Function"]},{"name":"data class FunctionExpression(val type: AstTypes = AstTypes.FUNCTION, val value: Function) : AstMember","description":"compxclib.parser.parsing.FunctionExpression","location":"compxclib/compxclib.parser.parsing/-function-expression/index.html","searchKeys":["FunctionExpression","data class FunctionExpression(val type: AstTypes = AstTypes.FUNCTION, val value: Function) : AstMember","compxclib.parser.parsing.FunctionExpression"]},{"name":"data class NumericLiteral(val type: AstTypes = AstTypes.NUMERIC_LITERAL, val value: ComplexNumber) : AstMember","description":"compxclib.parser.parsing.NumericLiteral","location":"compxclib/compxclib.parser.parsing/-numeric-literal/index.html","searchKeys":["NumericLiteral","data class NumericLiteral(val type: AstTypes = AstTypes.NUMERIC_LITERAL, val value: ComplexNumber) : AstMember","compxclib.parser.parsing.NumericLiteral"]},{"name":"data class Operation(val leftHandSide: AstMember, val operator: Operator, val rightHandSide: AstMember)","description":"compxclib.parser.parsing.Operation","location":"compxclib/compxclib.parser.parsing/-operation/index.html","searchKeys":["Operation","data class Operation(val leftHandSide: AstMember, val operator: Operator, val rightHandSide: AstMember)","compxclib.parser.parsing.Operation"]},{"name":"enum AstTypes : Enum<AstTypes> ","description":"compxclib.parser.data.AstTypes","location":"compxclib/compxclib.parser.data/-ast-types/index.html","searchKeys":["AstTypes","enum AstTypes : Enum<AstTypes> ","compxclib.parser.data.AstTypes"]},{"name":"enum Operator : Enum<Operator> ","description":"compxclib.enums.Operator","location":"compxclib/compxclib.enums/-operator/index.html","searchKeys":["Operator","enum Operator : Enum<Operator> ","compxclib.enums.Operator"]},{"name":"enum Parameter : Enum<Parameter> ","description":"compxclib.enums.Parameter","location":"compxclib/compxclib.enums/-parameter/index.html","searchKeys":["Parameter","enum Parameter : Enum<Parameter> ","compxclib.enums.Parameter"]},{"name":"enum Sign : Enum<Sign> ","description":"compxclib.enums.Sign","location":"compxclib/compxclib.enums/-sign/index.html","searchKeys":["Sign","enum Sign : Enum<Sign> ","compxclib.enums.Sign"]},{"name":"enum SqrtBranch : Enum<SqrtBranch> ","description":"compxclib.enums.SqrtBranch","location":"compxclib/compxclib.enums/-sqrt-branch/index.html","searchKeys":["SqrtBranch","enum SqrtBranch : Enum<SqrtBranch> ","compxclib.enums.SqrtBranch"]},{"name":"enum Tokens : Enum<Tokens> ","description":"compxclib.parser.data.Tokens","location":"compxclib/compxclib.parser.data/-tokens/index.html","searchKeys":["Tokens","enum Tokens : Enum<Tokens> ","compxclib.parser.data.Tokens"]},{"name":"fun AstTree(tks: ComplexList, numbers: List<ComplexNumber>)","description":"compxclib.parser.parsing.AstTree.AstTree","location":"compxclib/compxclib.parser.parsing/-ast-tree/-ast-tree.html","searchKeys":["AstTree","fun AstTree(tks: ComplexList, numbers: List<ComplexNumber>)","compxclib.parser.parsing.AstTree.AstTree"]},{"name":"fun BinaryExpression(type: AstTypes = AstTypes.BINARY_OPERATOR, value: Operation)","description":"compxclib.parser.parsing.BinaryExpression.BinaryExpression","location":"compxclib/compxclib.parser.parsing/-binary-expression/-binary-expression.html","searchKeys":["BinaryExpression","fun BinaryExpression(type: AstTypes = AstTypes.BINARY_OPERATOR, value: Operation)","compxclib.parser.parsing.BinaryExpression.BinaryExpression"]},{"name":"fun ComplexLexer(complexList: ComplexList)","description":"compxclib.parser.lexing.ComplexLexer.ComplexLexer","location":"compxclib/compxclib.parser.lexing/-complex-lexer/-complex-lexer.html","searchKeys":["ComplexLexer","fun ComplexLexer(complexList: ComplexList)","compxclib.parser.lexing.ComplexLexer.ComplexLexer"]},{"name":"fun ComplexNumber(real: Number, imaginary: Number)","description":"compxclib.ComplexNumber.ComplexNumber","location":"compxclib/compxclib/-complex-number/-complex-number.html","searchKeys":["ComplexNumber","fun ComplexNumber(real: Number, imaginary: Number)","compxclib.ComplexNumber.ComplexNumber"]},{"name":"fun ConversionRangeOutsideOfBounds(message: String)","description":"compxclib.exceptions.ConversionRangeOutsideOfBounds.ConversionRangeOutsideOfBounds","location":"compxclib/compxclib.exceptions/-conversion-range-outside-of-bounds/-conversion-range-outside-of-bounds.html","searchKeys":["ConversionRangeOutsideOfBounds","fun ConversionRangeOutsideOfBounds(message: String)","compxclib.exceptions.ConversionRangeOutsideOfBounds.ConversionRangeOutsideOfBounds"]},{"name":"fun Evaluator(input: AstMember)","description":"compxclib.parser.parsing.Evaluator.Evaluator","location":"compxclib/compxclib.parser.parsing/-evaluator/-evaluator.html","searchKeys":["Evaluator","fun Evaluator(input: AstMember)","compxclib.parser.parsing.Evaluator.Evaluator"]},{"name":"fun Function(function: (ComplexNumber) -> ComplexNumber, inside: AstMember)","description":"compxclib.parser.parsing.Function.Function","location":"compxclib/compxclib.parser.parsing/-function/-function.html","searchKeys":["Function","fun Function(function: (ComplexNumber) -> ComplexNumber, inside: AstMember)","compxclib.parser.parsing.Function.Function"]},{"name":"fun FunctionExpression(type: AstTypes = AstTypes.FUNCTION, value: Function)","description":"compxclib.parser.parsing.FunctionExpression.FunctionExpression","location":"compxclib/compxclib.parser.parsing/-function-expression/-function-expression.html","searchKeys":["FunctionExpression","fun FunctionExpression(type: AstTypes = AstTypes.FUNCTION, value: Function)","compxclib.parser.parsing.FunctionExpression.FunctionExpression"]},{"name":"fun IllegalConversionArgument(message: String)","description":"compxclib.exceptions.IllegalConversionArgument.IllegalConversionArgument","location":"compxclib/compxclib.exceptions/-illegal-conversion-argument/-illegal-conversion-argument.html","searchKeys":["IllegalConversionArgument","fun IllegalConversionArgument(message: String)","compxclib.exceptions.IllegalConversionArgument.IllegalConversionArgument"]},{"name":"fun InvalidComparison(message: String)","description":"compxclib.exceptions.InvalidComparison.InvalidComparison","location":"compxclib/compxclib.exceptions/-invalid-comparison/-invalid-comparison.html","searchKeys":["InvalidComparison","fun InvalidComparison(message: String)","compxclib.exceptions.InvalidComparison.InvalidComparison"]},{"name":"fun InvalidToken(message: String)","description":"compxclib.exceptions.InvalidToken.InvalidToken","location":"compxclib/compxclib.exceptions/-invalid-token/-invalid-token.html","searchKeys":["InvalidToken","fun InvalidToken(message: String)","compxclib.exceptions.InvalidToken.InvalidToken"]},{"name":"fun Lexer(input: String)","description":"compxclib.parser.lexing.Lexer.Lexer","location":"compxclib/compxclib.parser.lexing/-lexer/-lexer.html","searchKeys":["Lexer","fun Lexer(input: String)","compxclib.parser.lexing.Lexer.Lexer"]},{"name":"fun Number.toComplex(): ComplexNumber","description":"compxclib.functions.toComplex","location":"compxclib/compxclib.functions/to-complex.html","searchKeys":["toComplex","fun Number.toComplex(): ComplexNumber","compxclib.functions.toComplex"]},{"name":"fun NumberLexer(tokens: ComplexList)","description":"compxclib.parser.lexing.NumberLexer.NumberLexer","location":"compxclib/compxclib.parser.lexing/-number-lexer/-number-lexer.html","searchKeys":["NumberLexer","fun NumberLexer(tokens: ComplexList)","compxclib.parser.lexing.NumberLexer.NumberLexer"]},{"name":"fun NumericLiteral(type: AstTypes = AstTypes.NUMERIC_LITERAL, value: ComplexNumber)","description":"compxclib.parser.parsing.NumericLiteral.NumericLiteral","location":"compxclib/compxclib.parser.parsing/-numeric-literal/-numeric-literal.html","searchKeys":["NumericLiteral","fun NumericLiteral(type: AstTypes = AstTypes.NUMERIC_LITERAL, value: ComplexNumber)","compxclib.parser.parsing.NumericLiteral.NumericLiteral"]},{"name":"fun Operation(leftHandSide: AstMember, operator: Operator, rightHandSide: AstMember)","description":"compxclib.parser.parsing.Operation.Operation","location":"compxclib/compxclib.parser.parsing/-operation/-operation.html","searchKeys":["Operation","fun Operation(leftHandSide: AstMember, operator: Operator, rightHandSide: AstMember)","compxclib.parser.parsing.Operation.Operation"]},{"name":"fun Parser(input: String)","description":"compxclib.Parser.Parser","location":"compxclib/compxclib/-parser/-parser.html","searchKeys":["Parser","fun Parser(input: String)","compxclib.Parser.Parser"]},{"name":"fun arccos(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.arccos","location":"compxclib/compxclib.functions/arccos.html","searchKeys":["arccos","fun arccos(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","compxclib.functions.arccos"]},{"name":"fun arccosh(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.arccosh","location":"compxclib/compxclib.functions/arccosh.html","searchKeys":["arccosh","fun arccosh(of: ComplexNumber): ComplexNumber","compxclib.functions.arccosh"]},{"name":"fun arccot(of: ComplexNumber, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.arccot","location":"compxclib/compxclib.functions/arccot.html","searchKeys":["arccot","fun arccot(of: ComplexNumber, intBranch: Int = 0): ComplexNumber","compxclib.functions.arccot"]},{"name":"fun arccoth(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.arccoth","location":"compxclib/compxclib.functions/arccoth.html","searchKeys":["arccoth","fun arccoth(of: ComplexNumber): ComplexNumber","compxclib.functions.arccoth"]},{"name":"fun arccsc(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.arccsc","location":"compxclib/compxclib.functions/arccsc.html","searchKeys":["arccsc","fun arccsc(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","compxclib.functions.arccsc"]},{"name":"fun arccsch(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.arccsch","location":"compxclib/compxclib.functions/arccsch.html","searchKeys":["arccsch","fun arccsch(of: ComplexNumber): ComplexNumber","compxclib.functions.arccsch"]},{"name":"fun arcsec(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.arcsec","location":"compxclib/compxclib.functions/arcsec.html","searchKeys":["arcsec","fun arcsec(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","compxclib.functions.arcsec"]},{"name":"fun arcsech(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.arcsech","location":"compxclib/compxclib.functions/arcsech.html","searchKeys":["arcsech","fun arcsech(of: ComplexNumber): ComplexNumber","compxclib.functions.arcsech"]},{"name":"fun arcsin(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.arcsin","location":"compxclib/compxclib.functions/arcsin.html","searchKeys":["arcsin","fun arcsin(of: ComplexNumber, sqrtBranch: SqrtBranch = SqrtBranch.POSITIVE, intBranch: Int = 0): ComplexNumber","compxclib.functions.arcsin"]},{"name":"fun arcsinh(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.arcsinh","location":"compxclib/compxclib.functions/arcsinh.html","searchKeys":["arcsinh","fun arcsinh(of: ComplexNumber): ComplexNumber","compxclib.functions.arcsinh"]},{"name":"fun arctan(of: ComplexNumber, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.arctan","location":"compxclib/compxclib.functions/arctan.html","searchKeys":["arctan","fun arctan(of: ComplexNumber, intBranch: Int = 0): ComplexNumber","compxclib.functions.arctan"]},{"name":"fun arctanh(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.arctanh","location":"compxclib/compxclib.functions/arctanh.html","searchKeys":["arctanh","fun arctanh(of: ComplexNumber): ComplexNumber","compxclib.functions.arctanh"]},{"name":"fun arg(): Double","description":"compxclib.ComplexNumber.arg","location":"compxclib/compxclib/-complex-number/arg.html","searchKeys":["arg","fun arg(): Double","compxclib.ComplexNumber.arg"]},{"name":"fun arg(of: ComplexNumber): Double","description":"compxclib.functions.arg","location":"compxclib/compxclib.functions/arg.html","searchKeys":["arg","fun arg(of: ComplexNumber): Double","compxclib.functions.arg"]},{"name":"fun cbrt(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.cbrt","location":"compxclib/compxclib.functions/cbrt.html","searchKeys":["cbrt","fun cbrt(of: ComplexNumber): ComplexNumber","compxclib.functions.cbrt"]},{"name":"fun ceil(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.ceil","location":"compxclib/compxclib.functions/ceil.html","searchKeys":["ceil","fun ceil(of: ComplexNumber): ComplexNumber","compxclib.functions.ceil"]},{"name":"fun complexFromPolar(theta: Number, modulus: Number): ComplexNumber","description":"compxclib.functions.complexFromPolar","location":"compxclib/compxclib.functions/complex-from-polar.html","searchKeys":["complexFromPolar","fun complexFromPolar(theta: Number, modulus: Number): ComplexNumber","compxclib.functions.complexFromPolar"]},{"name":"fun complexLexer(): Pair<ComplexList, List<ComplexNumber>>","description":"compxclib.parser.lexing.ComplexLexer.complexLexer","location":"compxclib/compxclib.parser.lexing/-complex-lexer/complex-lexer.html","searchKeys":["complexLexer","fun complexLexer(): Pair<ComplexList, List<ComplexNumber>>","compxclib.parser.lexing.ComplexLexer.complexLexer"]},{"name":"fun conjugate(): ComplexNumber","description":"compxclib.ComplexNumber.conjugate","location":"compxclib/compxclib/-complex-number/conjugate.html","searchKeys":["conjugate","fun conjugate(): ComplexNumber","compxclib.ComplexNumber.conjugate"]},{"name":"fun cos(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.cos","location":"compxclib/compxclib.functions/cos.html","searchKeys":["cos","fun cos(of: ComplexNumber): ComplexNumber","compxclib.functions.cos"]},{"name":"fun cosh(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.cosh","location":"compxclib/compxclib.functions/cosh.html","searchKeys":["cosh","fun cosh(of: ComplexNumber): ComplexNumber","compxclib.functions.cosh"]},{"name":"fun cot(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.cot","location":"compxclib/compxclib.functions/cot.html","searchKeys":["cot","fun cot(of: ComplexNumber): ComplexNumber","compxclib.functions.cot"]},{"name":"fun coth(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.coth","location":"compxclib/compxclib.functions/coth.html","searchKeys":["coth","fun coth(of: ComplexNumber): ComplexNumber","compxclib.functions.coth"]},{"name":"fun csc(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.csc","location":"compxclib/compxclib.functions/csc.html","searchKeys":["csc","fun csc(of: ComplexNumber): ComplexNumber","compxclib.functions.csc"]},{"name":"fun csch(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.csch","location":"compxclib/compxclib.functions/csch.html","searchKeys":["csch","fun csch(of: ComplexNumber): ComplexNumber","compxclib.functions.csch"]},{"name":"fun divides(parameter: ComplexNumber): Boolean","description":"compxclib.ComplexNumber.divides","location":"compxclib/compxclib/-complex-number/divides.html","searchKeys":["divides","fun divides(parameter: ComplexNumber): Boolean","compxclib.ComplexNumber.divides"]},{"name":"fun evaluate(): ComplexNumber","description":"compxclib.parser.parsing.Evaluator.evaluate","location":"compxclib/compxclib.parser.parsing/-evaluator/evaluate.html","searchKeys":["evaluate","fun evaluate(): ComplexNumber","compxclib.parser.parsing.Evaluator.evaluate"]},{"name":"fun exp(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.exp","location":"compxclib/compxclib.functions/exp.html","searchKeys":["exp","fun exp(of: ComplexNumber): ComplexNumber","compxclib.functions.exp"]},{"name":"fun floor(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.floor","location":"compxclib/compxclib.functions/floor.html","searchKeys":["floor","fun floor(of: ComplexNumber): ComplexNumber","compxclib.functions.floor"]},{"name":"fun getDefaultRound(): Int","description":"compxclib.Constants.getDefaultRound","location":"compxclib/compxclib/-constants/get-default-round.html","searchKeys":["getDefaultRound","fun getDefaultRound(): Int","compxclib.Constants.getDefaultRound"]},{"name":"fun getMaxMethodNameSize(): Int","description":"compxclib.Constants.getMaxMethodNameSize","location":"compxclib/compxclib/-constants/get-max-method-name-size.html","searchKeys":["getMaxMethodNameSize","fun getMaxMethodNameSize(): Int","compxclib.Constants.getMaxMethodNameSize"]},{"name":"fun i(): ComplexNumber","description":"compxclib.Constants.i","location":"compxclib/compxclib/-constants/i.html","searchKeys":["i","fun i(): ComplexNumber","compxclib.Constants.i"]},{"name":"fun im(): Double","description":"compxclib.ComplexNumber.im","location":"compxclib/compxclib/-complex-number/im.html","searchKeys":["im","fun im(): Double","compxclib.ComplexNumber.im"]},{"name":"fun ln(of: ComplexNumber, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.ln","location":"compxclib/compxclib.functions/ln.html","searchKeys":["ln","fun ln(of: ComplexNumber, intBranch: Int = 0): ComplexNumber","compxclib.functions.ln"]},{"name":"fun log(base: ComplexNumber = ComplexNumber(10, 0), of: ComplexNumber, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.log","location":"compxclib/compxclib.functions/log.html","searchKeys":["log","fun log(base: ComplexNumber = ComplexNumber(10, 0), of: ComplexNumber, intBranch: Int = 0): ComplexNumber","compxclib.functions.log"]},{"name":"fun log(base: Number = 10, of: ComplexNumber, intBranch: Int = 0): ComplexNumber","description":"compxclib.functions.log","location":"compxclib/compxclib.functions/log.html","searchKeys":["log","fun log(base: Number = 10, of: ComplexNumber, intBranch: Int = 0): ComplexNumber","compxclib.functions.log"]},{"name":"fun mag(): Double","description":"compxclib.ComplexNumber.mag","location":"compxclib/compxclib/-complex-number/mag.html","searchKeys":["mag","fun mag(): Double","compxclib.ComplexNumber.mag"]},{"name":"fun mag(of: ComplexNumber): Double","description":"compxclib.functions.mag","location":"compxclib/compxclib.functions/mag.html","searchKeys":["mag","fun mag(of: ComplexNumber): Double","compxclib.functions.mag"]},{"name":"fun nthrt(of: ComplexNumber, n: ComplexNumber): ComplexNumber","description":"compxclib.functions.nthrt","location":"compxclib/compxclib.functions/nthrt.html","searchKeys":["nthrt","fun nthrt(of: ComplexNumber, n: ComplexNumber): ComplexNumber","compxclib.functions.nthrt"]},{"name":"fun nthrt(of: ComplexNumber, n: Number): ComplexNumber","description":"compxclib.functions.nthrt","location":"compxclib/compxclib.functions/nthrt.html","searchKeys":["nthrt","fun nthrt(of: ComplexNumber, n: Number): ComplexNumber","compxclib.functions.nthrt"]},{"name":"fun numberLexer(): ComplexList","description":"compxclib.parser.lexing.NumberLexer.numberLexer","location":"compxclib/compxclib.parser.lexing/-number-lexer/number-lexer.html","searchKeys":["numberLexer","fun numberLexer(): ComplexList","compxclib.parser.lexing.NumberLexer.numberLexer"]},{"name":"fun parse(): AstMember","description":"compxclib.parser.parsing.AstTree.parse","location":"compxclib/compxclib.parser.parsing/-ast-tree/parse.html","searchKeys":["parse","fun parse(): AstMember","compxclib.parser.parsing.AstTree.parse"]},{"name":"fun parse(): ComplexNumber","description":"compxclib.Parser.parse","location":"compxclib/compxclib/-parser/parse.html","searchKeys":["parse","fun parse(): ComplexNumber","compxclib.Parser.parse"]},{"name":"fun re(): Double","description":"compxclib.ComplexNumber.re","location":"compxclib/compxclib/-complex-number/re.html","searchKeys":["re","fun re(): Double","compxclib.ComplexNumber.re"]},{"name":"fun round(places: Int): ComplexNumber","description":"compxclib.ComplexNumber.round","location":"compxclib/compxclib/-complex-number/round.html","searchKeys":["round","fun round(places: Int): ComplexNumber","compxclib.ComplexNumber.round"]},{"name":"fun roundToGaussianInteger(): ComplexNumber","description":"compxclib.ComplexNumber.roundToGaussianInteger","location":"compxclib/compxclib/-complex-number/round-to-gaussian-integer.html","searchKeys":["roundToGaussianInteger","fun roundToGaussianInteger(): ComplexNumber","compxclib.ComplexNumber.roundToGaussianInteger"]},{"name":"fun sec(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.sec","location":"compxclib/compxclib.functions/sec.html","searchKeys":["sec","fun sec(of: ComplexNumber): ComplexNumber","compxclib.functions.sec"]},{"name":"fun sech(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.sech","location":"compxclib/compxclib.functions/sech.html","searchKeys":["sech","fun sech(of: ComplexNumber): ComplexNumber","compxclib.functions.sech"]},{"name":"fun setDefaultRound(value: Int)","description":"compxclib.Constants.setDefaultRound","location":"compxclib/compxclib/-constants/set-default-round.html","searchKeys":["setDefaultRound","fun setDefaultRound(value: Int)","compxclib.Constants.setDefaultRound"]},{"name":"fun setInputString(input: String)","description":"compxclib.Parser.setInputString","location":"compxclib/compxclib/-parser/set-input-string.html","searchKeys":["setInputString","fun setInputString(input: String)","compxclib.Parser.setInputString"]},{"name":"fun sin(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.sin","location":"compxclib/compxclib.functions/sin.html","searchKeys":["sin","fun sin(of: ComplexNumber): ComplexNumber","compxclib.functions.sin"]},{"name":"fun sinh(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.sinh","location":"compxclib/compxclib.functions/sinh.html","searchKeys":["sinh","fun sinh(of: ComplexNumber): ComplexNumber","compxclib.functions.sinh"]},{"name":"fun sqrt(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.sqrt","location":"compxclib/compxclib.functions/sqrt.html","searchKeys":["sqrt","fun sqrt(of: ComplexNumber): ComplexNumber","compxclib.functions.sqrt"]},{"name":"fun tan(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.tan","location":"compxclib/compxclib.functions/tan.html","searchKeys":["tan","fun tan(of: ComplexNumber): ComplexNumber","compxclib.functions.tan"]},{"name":"fun tanh(of: ComplexNumber): ComplexNumber","description":"compxclib.functions.tanh","location":"compxclib/compxclib.functions/tanh.html","searchKeys":["tanh","fun tanh(of: ComplexNumber): ComplexNumber","compxclib.functions.tanh"]},{"name":"fun toReal(): Double","description":"compxclib.ComplexNumber.toReal","location":"compxclib/compxclib/-complex-number/to-real.html","searchKeys":["toReal","fun toReal(): Double","compxclib.ComplexNumber.toReal"]},{"name":"fun tokenize(): ComplexList","description":"compxclib.parser.lexing.Lexer.tokenize","location":"compxclib/compxclib.parser.lexing/-lexer/tokenize.html","searchKeys":["tokenize","fun tokenize(): ComplexList","compxclib.parser.lexing.Lexer.tokenize"]},{"name":"fun valueOf(value: String): AstTypes","description":"compxclib.parser.data.AstTypes.valueOf","location":"compxclib/compxclib.parser.data/-ast-types/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AstTypes","compxclib.parser.data.AstTypes.valueOf"]},{"name":"fun valueOf(value: String): Operator","description":"compxclib.enums.Operator.valueOf","location":"compxclib/compxclib.enums/-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Operator","compxclib.enums.Operator.valueOf"]},{"name":"fun valueOf(value: String): Parameter","description":"compxclib.enums.Parameter.valueOf","location":"compxclib/compxclib.enums/-parameter/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Parameter","compxclib.enums.Parameter.valueOf"]},{"name":"fun valueOf(value: String): Sign","description":"compxclib.enums.Sign.valueOf","location":"compxclib/compxclib.enums/-sign/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sign","compxclib.enums.Sign.valueOf"]},{"name":"fun valueOf(value: String): SqrtBranch","description":"compxclib.enums.SqrtBranch.valueOf","location":"compxclib/compxclib.enums/-sqrt-branch/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SqrtBranch","compxclib.enums.SqrtBranch.valueOf"]},{"name":"fun valueOf(value: String): Tokens","description":"compxclib.parser.data.Tokens.valueOf","location":"compxclib/compxclib.parser.data/-tokens/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Tokens","compxclib.parser.data.Tokens.valueOf"]},{"name":"fun values(): Array<AstTypes>","description":"compxclib.parser.data.AstTypes.values","location":"compxclib/compxclib.parser.data/-ast-types/values.html","searchKeys":["values","fun values(): Array<AstTypes>","compxclib.parser.data.AstTypes.values"]},{"name":"fun values(): Array<Operator>","description":"compxclib.enums.Operator.values","location":"compxclib/compxclib.enums/-operator/values.html","searchKeys":["values","fun values(): Array<Operator>","compxclib.enums.Operator.values"]},{"name":"fun values(): Array<Parameter>","description":"compxclib.enums.Parameter.values","location":"compxclib/compxclib.enums/-parameter/values.html","searchKeys":["values","fun values(): Array<Parameter>","compxclib.enums.Parameter.values"]},{"name":"fun values(): Array<Sign>","description":"compxclib.enums.Sign.values","location":"compxclib/compxclib.enums/-sign/values.html","searchKeys":["values","fun values(): Array<Sign>","compxclib.enums.Sign.values"]},{"name":"fun values(): Array<SqrtBranch>","description":"compxclib.enums.SqrtBranch.values","location":"compxclib/compxclib.enums/-sqrt-branch/values.html","searchKeys":["values","fun values(): Array<SqrtBranch>","compxclib.enums.SqrtBranch.values"]},{"name":"fun values(): Array<Tokens>","description":"compxclib.parser.data.Tokens.values","location":"compxclib/compxclib.parser.data/-tokens/values.html","searchKeys":["values","fun values(): Array<Tokens>","compxclib.parser.data.Tokens.values"]},{"name":"infix fun Number.pow(to: ComplexNumber): ComplexNumber","description":"compxclib.operators.pow","location":"compxclib/compxclib.operators/pow.html","searchKeys":["pow","infix fun Number.pow(to: ComplexNumber): ComplexNumber","compxclib.operators.pow"]},{"name":"infix fun pow(other: ComplexNumber): ComplexNumber","description":"compxclib.ComplexNumber.pow","location":"compxclib/compxclib/-complex-number/pow.html","searchKeys":["pow","infix fun pow(other: ComplexNumber): ComplexNumber","compxclib.ComplexNumber.pow"]},{"name":"infix fun pow(other: Number): ComplexNumber","description":"compxclib.ComplexNumber.pow","location":"compxclib/compxclib/-complex-number/pow.html","searchKeys":["pow","infix fun pow(other: Number): ComplexNumber","compxclib.ComplexNumber.pow"]},{"name":"interface AstMember","description":"compxclib.parser.parsing.AstMember","location":"compxclib/compxclib.parser.parsing/-ast-member/index.html","searchKeys":["AstMember","interface AstMember","compxclib.parser.parsing.AstMember"]},{"name":"object Constants","description":"compxclib.Constants","location":"compxclib/compxclib/-constants/index.html","searchKeys":["Constants","object Constants","compxclib.Constants"]},{"name":"object Dictionaries","description":"compxclib.parser.data.Dictionaries","location":"compxclib/compxclib.parser.data/-dictionaries/index.html","searchKeys":["Dictionaries","object Dictionaries","compxclib.parser.data.Dictionaries"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"compxclib.ComplexNumber.equals","location":"compxclib/compxclib/-complex-number/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","compxclib.ComplexNumber.equals"]},{"name":"open override fun hashCode(): Int","description":"compxclib.ComplexNumber.hashCode","location":"compxclib/compxclib/-complex-number/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","compxclib.ComplexNumber.hashCode"]},{"name":"open override fun toString(): String","description":"compxclib.ComplexNumber.toString","location":"compxclib/compxclib/-complex-number/to-string.html","searchKeys":["toString","open override fun toString(): String","compxclib.ComplexNumber.toString"]},{"name":"open override fun toString(): String","description":"compxclib.Parser.toString","location":"compxclib/compxclib/-parser/to-string.html","searchKeys":["toString","open override fun toString(): String","compxclib.Parser.toString"]},{"name":"open override val type: AstTypes","description":"compxclib.parser.parsing.BinaryExpression.type","location":"compxclib/compxclib.parser.parsing/-binary-expression/type.html","searchKeys":["type","open override val type: AstTypes","compxclib.parser.parsing.BinaryExpression.type"]},{"name":"open override val type: AstTypes","description":"compxclib.parser.parsing.FunctionExpression.type","location":"compxclib/compxclib.parser.parsing/-function-expression/type.html","searchKeys":["type","open override val type: AstTypes","compxclib.parser.parsing.FunctionExpression.type"]},{"name":"open override val type: AstTypes","description":"compxclib.parser.parsing.NumericLiteral.type","location":"compxclib/compxclib.parser.parsing/-numeric-literal/type.html","searchKeys":["type","open override val type: AstTypes","compxclib.parser.parsing.NumericLiteral.type"]},{"name":"open override val value: ComplexNumber","description":"compxclib.parser.parsing.NumericLiteral.value","location":"compxclib/compxclib.parser.parsing/-numeric-literal/value.html","searchKeys":["value","open override val value: ComplexNumber","compxclib.parser.parsing.NumericLiteral.value"]},{"name":"open override val value: Function","description":"compxclib.parser.parsing.FunctionExpression.value","location":"compxclib/compxclib.parser.parsing/-function-expression/value.html","searchKeys":["value","open override val value: Function","compxclib.parser.parsing.FunctionExpression.value"]},{"name":"open override val value: Operation","description":"compxclib.parser.parsing.BinaryExpression.value","location":"compxclib/compxclib.parser.parsing/-binary-expression/value.html","searchKeys":["value","open override val value: Operation","compxclib.parser.parsing.BinaryExpression.value"]},{"name":"operator fun Number.div(complexNumber: ComplexNumber): ComplexNumber","description":"compxclib.operators.div","location":"compxclib/compxclib.operators/div.html","searchKeys":["div","operator fun Number.div(complexNumber: ComplexNumber): ComplexNumber","compxclib.operators.div"]},{"name":"operator fun Number.minus(complexNumber: ComplexNumber): ComplexNumber","description":"compxclib.operators.minus","location":"compxclib/compxclib.operators/minus.html","searchKeys":["minus","operator fun Number.minus(complexNumber: ComplexNumber): ComplexNumber","compxclib.operators.minus"]},{"name":"operator fun Number.plus(complexNumber: ComplexNumber): ComplexNumber","description":"compxclib.operators.plus","location":"compxclib/compxclib.operators/plus.html","searchKeys":["plus","operator fun Number.plus(complexNumber: ComplexNumber): ComplexNumber","compxclib.operators.plus"]},{"name":"operator fun Number.rem(complexNumber: ComplexNumber): ComplexNumber","description":"compxclib.operators.rem","location":"compxclib/compxclib.operators/rem.html","searchKeys":["rem","operator fun Number.rem(complexNumber: ComplexNumber): ComplexNumber","compxclib.operators.rem"]},{"name":"operator fun Number.times(complexNumber: ComplexNumber): ComplexNumber","description":"compxclib.operators.times","location":"compxclib/compxclib.operators/times.html","searchKeys":["times","operator fun Number.times(complexNumber: ComplexNumber): ComplexNumber","compxclib.operators.times"]},{"name":"operator fun dec(parameter: Parameter = Parameter.BOTH): ComplexNumber","description":"compxclib.ComplexNumber.dec","location":"compxclib/compxclib/-complex-number/dec.html","searchKeys":["dec","operator fun dec(parameter: Parameter = Parameter.BOTH): ComplexNumber","compxclib.ComplexNumber.dec"]},{"name":"operator fun div(b: ComplexNumber): ComplexNumber","description":"compxclib.ComplexNumber.div","location":"compxclib/compxclib/-complex-number/div.html","searchKeys":["div","operator fun div(b: ComplexNumber): ComplexNumber","compxclib.ComplexNumber.div"]},{"name":"operator fun div(b: Number): ComplexNumber","description":"compxclib.ComplexNumber.div","location":"compxclib/compxclib/-complex-number/div.html","searchKeys":["div","operator fun div(b: Number): ComplexNumber","compxclib.ComplexNumber.div"]},{"name":"operator fun inc(parameter: Parameter = Parameter.BOTH): ComplexNumber","description":"compxclib.ComplexNumber.inc","location":"compxclib/compxclib/-complex-number/inc.html","searchKeys":["inc","operator fun inc(parameter: Parameter = Parameter.BOTH): ComplexNumber","compxclib.ComplexNumber.inc"]},{"name":"operator fun minus(b: ComplexNumber): ComplexNumber","description":"compxclib.ComplexNumber.minus","location":"compxclib/compxclib/-complex-number/minus.html","searchKeys":["minus","operator fun minus(b: ComplexNumber): ComplexNumber","compxclib.ComplexNumber.minus"]},{"name":"operator fun minus(b: Number): ComplexNumber","description":"compxclib.ComplexNumber.minus","location":"compxclib/compxclib/-complex-number/minus.html","searchKeys":["minus","operator fun minus(b: Number): ComplexNumber","compxclib.ComplexNumber.minus"]},{"name":"operator fun plus(b: ComplexNumber): ComplexNumber","description":"compxclib.ComplexNumber.plus","location":"compxclib/compxclib/-complex-number/plus.html","searchKeys":["plus","operator fun plus(b: ComplexNumber): ComplexNumber","compxclib.ComplexNumber.plus"]},{"name":"operator fun plus(b: Number): ComplexNumber","description":"compxclib.ComplexNumber.plus","location":"compxclib/compxclib/-complex-number/plus.html","searchKeys":["plus","operator fun plus(b: Number): ComplexNumber","compxclib.ComplexNumber.plus"]},{"name":"operator fun rem(b: ComplexNumber): ComplexNumber","description":"compxclib.ComplexNumber.rem","location":"compxclib/compxclib/-complex-number/rem.html","searchKeys":["rem","operator fun rem(b: ComplexNumber): ComplexNumber","compxclib.ComplexNumber.rem"]},{"name":"operator fun times(b: ComplexNumber): ComplexNumber","description":"compxclib.ComplexNumber.times","location":"compxclib/compxclib/-complex-number/times.html","searchKeys":["times","operator fun times(b: ComplexNumber): ComplexNumber","compxclib.ComplexNumber.times"]},{"name":"operator fun times(b: Number): ComplexNumber","description":"compxclib.ComplexNumber.times","location":"compxclib/compxclib/-complex-number/times.html","searchKeys":["times","operator fun times(b: Number): ComplexNumber","compxclib.ComplexNumber.times"]},{"name":"operator fun unaryMinus(): ComplexNumber","description":"compxclib.ComplexNumber.unaryMinus","location":"compxclib/compxclib/-complex-number/unary-minus.html","searchKeys":["unaryMinus","operator fun unaryMinus(): ComplexNumber","compxclib.ComplexNumber.unaryMinus"]},{"name":"val function: (ComplexNumber) -> ComplexNumber","description":"compxclib.parser.parsing.Function.function","location":"compxclib/compxclib.parser.parsing/-function/function.html","searchKeys":["function","val function: (ComplexNumber) -> ComplexNumber","compxclib.parser.parsing.Function.function"]},{"name":"val functionAliases: Array<String>","description":"compxclib.parser.data.Dictionaries.functionAliases","location":"compxclib/compxclib.parser.data/-dictionaries/function-aliases.html","searchKeys":["functionAliases","val functionAliases: Array<String>","compxclib.parser.data.Dictionaries.functionAliases"]},{"name":"val functionMap: Map<String, (ComplexNumber) -> ComplexNumber>","description":"compxclib.parser.data.Dictionaries.functionMap","location":"compxclib/compxclib.parser.data/-dictionaries/function-map.html","searchKeys":["functionMap","val functionMap: Map<String, (ComplexNumber) -> ComplexNumber>","compxclib.parser.data.Dictionaries.functionMap"]},{"name":"val inside: AstMember","description":"compxclib.parser.parsing.Function.inside","location":"compxclib/compxclib.parser.parsing/-function/inside.html","searchKeys":["inside","val inside: AstMember","compxclib.parser.parsing.Function.inside"]},{"name":"val leftHandSide: AstMember","description":"compxclib.parser.parsing.Operation.leftHandSide","location":"compxclib/compxclib.parser.parsing/-operation/left-hand-side.html","searchKeys":["leftHandSide","val leftHandSide: AstMember","compxclib.parser.parsing.Operation.leftHandSide"]},{"name":"val operator: Operator","description":"compxclib.parser.parsing.Operation.operator","location":"compxclib/compxclib.parser.parsing/-operation/operator.html","searchKeys":["operator","val operator: Operator","compxclib.parser.parsing.Operation.operator"]},{"name":"val rightHandSide: AstMember","description":"compxclib.parser.parsing.Operation.rightHandSide","location":"compxclib/compxclib.parser.parsing/-operation/right-hand-side.html","searchKeys":["rightHandSide","val rightHandSide: AstMember","compxclib.parser.parsing.Operation.rightHandSide"]}]
